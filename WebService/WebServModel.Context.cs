//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebService
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class WebServEntities : DbContext
    {
        public WebServEntities()
            : base("name=WebServEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Aparatos> Aparatos { get; set; }
        public virtual DbSet<Log> Log { get; set; }
    
        public virtual ObjectResult<GetAparatos_Result> GetAparatos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAparatos_Result>("GetAparatos");
        }
    
        public virtual int RegistrarAparato(string pais, string ciudad, Nullable<decimal> magnitud, Nullable<decimal> profundidad, string geolocalizacion)
        {
            var paisParameter = pais != null ?
                new ObjectParameter("Pais", pais) :
                new ObjectParameter("Pais", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("Ciudad", ciudad) :
                new ObjectParameter("Ciudad", typeof(string));
    
            var magnitudParameter = magnitud.HasValue ?
                new ObjectParameter("Magnitud", magnitud) :
                new ObjectParameter("Magnitud", typeof(decimal));
    
            var profundidadParameter = profundidad.HasValue ?
                new ObjectParameter("Profundidad", profundidad) :
                new ObjectParameter("Profundidad", typeof(decimal));
    
            var geolocalizacionParameter = geolocalizacion != null ?
                new ObjectParameter("Geolocalizacion", geolocalizacion) :
                new ObjectParameter("Geolocalizacion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegistrarAparato", paisParameter, ciudadParameter, magnitudParameter, profundidadParameter, geolocalizacionParameter);
        }
    }
}
